{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currData","setCurrData","Data","setData","click","setClick","useEffect","a","fetch","res","json","data","console","log","activity","getData","old","className","map","curr","ind","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAkFeA,EA5EH,WAGV,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAyBJ,oBAAS,GAAlC,mBAAOK,EAAP,KAAaC,EAAb,KAgDA,OA1BAC,qBAAU,YACK,uCAAG,8BAAAC,EAAA,+EAEKC,MAAM,yCAFX,cAEPC,EAFO,gBAGMA,EAAIC,OAHV,OAGPC,EAHO,OAIbC,QAAQC,IAAIF,EAAKG,UACjBb,EAAYU,EAAKG,UALJ,kDAOZF,QAAQC,IAAR,MAPY,0DAAH,qDAWZE,GAECZ,GAAQ,SAACa,GACT,MAAM,GAAN,mBAAWA,GAAX,CAAiBhB,OAInBY,QAAQC,IAAIX,KAGX,CAACE,IAKF,qCACA,sBAAKa,UAAU,YAAf,UACA,mEAEEf,EAAKgB,KACL,SAACC,EAAKC,GACJ,GAAGA,GAAO,EACR,OAAO,uCAAQA,EAAR,iBAAiBD,WAQ9B,qBAAKF,UAAU,MAAf,SACE,wBAAQA,UAAU,IAAII,QAjDd,WAEVhB,GAAUD,IA+CR,yCChESkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b4011147.chunk.js","sourcesContent":["import { useState , useEffect} from 'react';\nimport './App.css';\nimport create from 'zustand';\n\n\n\nconst App = () => {\n\n\n  const [currData, setCurrData] = useState(\"\");\n  const [Data, setData] = useState([]);            //Hooks are pretty simpler\n  const [click,setClick] = useState(false);\n\n\n  //zustand\n  // const useStore = create(set =>({\n  //   Data  : [],\n  //   addData : (arrd) => set(state => ({ Data : [...state.Data, arrd]})),\n  // }))\n\n  // const Data = useStore(state => state.Data);\n  // const addData = useStore(state => state.addData);\n\n\n\n \n\n  const add = () => {\n    \n    setClick(!click);\n    \n  }\n\n  useEffect(() => {\n    const getData = async()=> {\n      try{\n       const res = await fetch(\"https://www.boredapi.com/api/activity\");\n       const data = await res.json();\n       console.log(data.activity);\n       setCurrData(data.activity);\n      }catch(err){\n        console.log(err);\n      }\n     };\n    \n     getData();\n\n      setData((old) =>{\n      return [...old,  currData];\n     })\n\n    // addData(currData);\n    console.log(Data)\n     \n\n  }, [click])\n\n  \n\n  return (\n    <>\n    <div className=\"container\">\n    <h3>Random activity if you  are Bored</h3>\n    {\n      Data.map(\n      (curr,ind) => {\n        if(ind >= 1){\n          return <h4>{`${ind}-->${curr}`}</h4>\n        }\n      }\n    )\n    }\n    \n    </div>\n\n    <div className=\"btn\">\n      <button className=\"b\" onClick ={add}>Click for suggestions</button>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}